//
//  MachineDataViewController.swift
//  Image Machine
//
//  Created by Juanita Vyatri on 24/11/18.
//  Copyright (c) 2018 Vyatri. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// Sent from Presenter
protocol MachineDataDisplayLogic: class
{
    func displayMachines(machines: [Machine])
}

class MachineDataViewController: UIViewController, MachineDataDisplayLogic, UITableViewDelegate, UITableViewDataSource
{
    var interactor: MachineDataBusinessLogic?
    var router: (NSObjectProtocol & MachineDataRoutingLogic & MachineDataDataPassing)?
    
    @IBOutlet weak var machineDataTableView: UITableView!
    var MachineList: [Machine]! = []
    var sortBy = "name"
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MachineDataInteractor()
        let presenter = MachineDataPresenter()
        let router = MachineDataRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupDisplay()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.parseMachines(sortBy: sortBy)
    }
    
    // MARK: - Main functions
    
    func setupDisplay()
    {
        machineDataTableView.rowHeight = UITableView.automaticDimension
        machineDataTableView.estimatedRowHeight = 63
    }
    
    func displayMachines(machines: [Machine])
    {
        MachineList = machines
        machineDataTableView.reloadData()
    }
    
    func sortByName() {
        sortBy = "name"
        self.MachineList.sort { return $0.machineName < $1.machineName }
        self.machineDataTableView.reloadData()
    }
    
    func sortByType() {
        sortBy = "type"
        self.MachineList.sort { return $0.machineType < $1.machineType }
        self.machineDataTableView.reloadData()
    }
    
    // MARK: - Actions
    
    @IBAction func doSort(_ sender: UIBarButtonItem) {
        
        let alert = UIAlertController(title: "Sort by", message: "How do you want to sort the Machine Data", preferredStyle: .actionSheet)
        
        alert.addAction(UIAlertAction(title: "Machine Name", style: .default , handler:{ (UIAlertAction)in
            self.sortByName()
        }))
        
        alert.addAction(UIAlertAction(title: "Machine Type", style: .default , handler:{ (UIAlertAction)in
            self.sortByType()
        }))
        
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler:nil))
        
        self.present(alert, animated: true, completion: nil)
    }
    
    @IBAction func addMachineData(_ sender: Any) {
        router?.routeToDetail(machineId: UUID().uuidString, displayMode: "add")
    }
    
    // MARK: - Tableview delegate and datasources
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return MachineList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "dataCell", for: indexPath) as! MachineDataCell
        cell.setData(MachineList[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToDetail(machineId: MachineList[indexPath.row].machineId, displayMode: "view")
    }
    
}
