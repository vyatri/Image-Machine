//
//  MachineDetailWorker.swift
//  Image Machine
//
//  Created by Juanita Vyatri on 24/11/18.
//  Copyright (c) 2018 Vyatri. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class MachineDetailWorker
{
    func getData(machineId: String) -> Machine
    {
        var machine: Machine!
        if let data = UserDefaults.standard.data(forKey: "machines") {
            let machines = try! PropertyListDecoder().decode([Machine].self, from: data)
            machines.forEach { (_machine) in
                if _machine.machineId == machineId {
                    machine = _machine
                }
            }
        }
        return machine
    }
    
    func addMachine(_ newMachine: Machine) -> Bool
    {
        var machines = [Machine]()
        if let data = UserDefaults.standard.data(forKey: "machines") {
            machines = try! PropertyListDecoder().decode([Machine].self, from: data)
        }
        machines.append(newMachine)
        
        do {
            try UserDefaults.standard.set(PropertyListEncoder().encode(machines), forKey: "machines")
            return true
        } catch {
            return false
        }
    }
    
    func updateMachine(_ machine: Machine) -> Bool
    {
        var machines = [Machine]()
        if let data = UserDefaults.standard.data(forKey: "machines") {
            machines = try! PropertyListDecoder().decode([Machine].self, from: data)
            var i = 0
            machines.forEach { (_oldMachine) in
                if _oldMachine.machineId == machine.machineId {
                    machines.remove(at: i)
                    machines.append(machine)
                }
                i += 1
            }
        }
        
        do {
            try UserDefaults.standard.set(PropertyListEncoder().encode(machines), forKey: "machines")
            return true
        } catch {
            return false
        }
    }
    
    func removeMachine(machineId: String) -> Bool
    {
        var machines = [Machine]()
        if let data = UserDefaults.standard.data(forKey: "machines") {
            machines = try! PropertyListDecoder().decode([Machine].self, from: data)
            var i = 0
            machines.forEach { (_oldMachine) in
                if _oldMachine.machineId == machineId {
                    machines.remove(at: i)
                }
                i += 1
            }
        }
        
        do {
            try UserDefaults.standard.set(PropertyListEncoder().encode(machines), forKey: "machines")
            return true
        } catch {
            return false
        }
    }
}
